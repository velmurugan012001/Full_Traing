#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LINQtoSQL
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="sample")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void Insertdept(dept instance);
    partial void Updatedept(dept instance);
    partial void Deletedept(dept instance);
    partial void Insertemp(emp instance);
    partial void Updateemp(emp instance);
    partial void Deleteemp(emp instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::LINQtoSQL.Properties.Settings.Default.sampleConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<stud_table> stud_tables
		{
			get
			{
				return this.GetTable<stud_table>();
			}
		}
		
		public System.Data.Linq.Table<dept> depts
		{
			get
			{
				return this.GetTable<dept>();
			}
		}
		
		public System.Data.Linq.Table<emp> emps
		{
			get
			{
				return this.GetTable<emp>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.stud_table")]
	public partial class stud_table
	{
		
		private System.Nullable<int> _rollno;
		
		private string _name;
		
		public stud_table()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_rollno", DbType="Int")]
		public System.Nullable<int> rollno
		{
			get
			{
				return this._rollno;
			}
			set
			{
				if ((this._rollno != value))
				{
					this._rollno = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(20)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this._name = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.dept")]
	public partial class dept : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _deptnum;
		
		private string _dname;
		
		private EntitySet<emp> _emps;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OndeptnumChanging(int value);
    partial void OndeptnumChanged();
    partial void OndnameChanging(string value);
    partial void OndnameChanged();
    #endregion
		
		public dept()
		{
			this._emps = new EntitySet<emp>(new Action<emp>(this.attach_emps), new Action<emp>(this.detach_emps));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_deptnum", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int deptnum
		{
			get
			{
				return this._deptnum;
			}
			set
			{
				if ((this._deptnum != value))
				{
					this.OndeptnumChanging(value);
					this.SendPropertyChanging();
					this._deptnum = value;
					this.SendPropertyChanged("deptnum");
					this.OndeptnumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dname", DbType="NVarChar(20)")]
		public string dname
		{
			get
			{
				return this._dname;
			}
			set
			{
				if ((this._dname != value))
				{
					this.OndnameChanging(value);
					this.SendPropertyChanging();
					this._dname = value;
					this.SendPropertyChanged("dname");
					this.OndnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="dept_emp", Storage="_emps", ThisKey="deptnum", OtherKey="deptno")]
		public EntitySet<emp> emps
		{
			get
			{
				return this._emps;
			}
			set
			{
				this._emps.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_emps(emp entity)
		{
			this.SendPropertyChanging();
			entity.dept = this;
		}
		
		private void detach_emps(emp entity)
		{
			this.SendPropertyChanging();
			entity.dept = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.emp")]
	public partial class emp : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _eno;
		
		private string _ename;
		
		private int _ph;
		
		private System.Nullable<int> _deptno;
		
		private string _desig;
		
		private EntityRef<dept> _dept;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnenoChanging(int value);
    partial void OnenoChanged();
    partial void OnenameChanging(string value);
    partial void OnenameChanged();
    partial void OnphChanging(int value);
    partial void OnphChanged();
    partial void OndeptnoChanging(System.Nullable<int> value);
    partial void OndeptnoChanged();
    partial void OndesigChanging(string value);
    partial void OndesigChanged();
    #endregion
		
		public emp()
		{
			this._dept = default(EntityRef<dept>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_eno", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int eno
		{
			get
			{
				return this._eno;
			}
			set
			{
				if ((this._eno != value))
				{
					this.OnenoChanging(value);
					this.SendPropertyChanging();
					this._eno = value;
					this.SendPropertyChanged("eno");
					this.OnenoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ename", DbType="NVarChar(25) NOT NULL", CanBeNull=false)]
		public string ename
		{
			get
			{
				return this._ename;
			}
			set
			{
				if ((this._ename != value))
				{
					this.OnenameChanging(value);
					this.SendPropertyChanging();
					this._ename = value;
					this.SendPropertyChanged("ename");
					this.OnenameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ph", DbType="Int NOT NULL")]
		public int ph
		{
			get
			{
				return this._ph;
			}
			set
			{
				if ((this._ph != value))
				{
					this.OnphChanging(value);
					this.SendPropertyChanging();
					this._ph = value;
					this.SendPropertyChanged("ph");
					this.OnphChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_deptno", DbType="Int")]
		public System.Nullable<int> deptno
		{
			get
			{
				return this._deptno;
			}
			set
			{
				if ((this._deptno != value))
				{
					if (this._dept.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OndeptnoChanging(value);
					this.SendPropertyChanging();
					this._deptno = value;
					this.SendPropertyChanged("deptno");
					this.OndeptnoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_desig", DbType="NVarChar(20)")]
		public string desig
		{
			get
			{
				return this._desig;
			}
			set
			{
				if ((this._desig != value))
				{
					this.OndesigChanging(value);
					this.SendPropertyChanging();
					this._desig = value;
					this.SendPropertyChanged("desig");
					this.OndesigChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="dept_emp", Storage="_dept", ThisKey="deptno", OtherKey="deptnum", IsForeignKey=true)]
		public dept dept
		{
			get
			{
				return this._dept.Entity;
			}
			set
			{
				dept previousValue = this._dept.Entity;
				if (((previousValue != value) 
							|| (this._dept.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._dept.Entity = null;
						previousValue.emps.Remove(this);
					}
					this._dept.Entity = value;
					if ((value != null))
					{
						value.emps.Add(this);
						this._deptno = value.deptnum;
					}
					else
					{
						this._deptno = default(Nullable<int>);
					}
					this.SendPropertyChanged("dept");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
